---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.14.0
  name: scenarioruns.policy.kaishield.io
spec:
  group: policy.kaishield.io
  names:
    kind: ScenarioRun
    listKind: ScenarioRunList
    plural: scenarioruns
    shortNames:
    - sr
    singular: scenariorun
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.phase
      name: PHASE
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: AGE
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: |-
          ScenarioRun is the Schema for the scenarioruns API
          It is a non-standard Impl of ocms: https://altershield.io/zh-CN/open-change-management-specification/change-model
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: ScenarioRunSpec defines the desired state of ScenarioRun
            properties:
              breakpoint:
                default: true
                description: |-
                  Breakpoint
                  MUST: Modifiable only if Phase == Pending
                  MUST: (is false) or (from true to false)
                type: boolean
              data:
                description: |-
                  Data
                  MUST: follow ScenarioSet.Spec.Inputs
                type: object
                x-kubernetes-preserve-unknown-fields: true
              objects:
                description: Objects
                items:
                  properties:
                    object:
                      description: |-
                        ObjectReference contains enough information to let you inspect or modify the referred object.
                        ---
                        New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs.
                         1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage.
                         2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular
                            restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted".
                            Those cannot be well described when embedded.
                         3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen.
                         4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity
                            during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple
                            and the version of the actual struct is irrelevant.
                         5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type
                            will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control.


                        Instead of using this type, create a locally provided and used type that is well-focused on your reference.
                        For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
                      properties:
                        apiVersion:
                          description: API version of the referent.
                          type: string
                        fieldPath:
                          description: |-
                            If referring to a piece of an object instead of an entire object, this string
                            should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
                            For example, if the object reference is to a container within a pod, this would take on a value like:
                            "spec.containers{name}" (where "name" refers to the name of the container that triggered
                            the event) or if no container name is specified "spec.containers[2]" (container with
                            index 2 in this pod). This syntax is chosen only to have some well-defined way of
                            referencing a part of an object.
                            TODO: this design is not final and this field is subject to change in the future.
                          type: string
                        kind:
                          description: |-
                            Kind of the referent.
                            More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
                          type: string
                        name:
                          description: |-
                            Name of the referent.
                            More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                          type: string
                        namespace:
                          description: |-
                            Namespace of the referent.
                            More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
                          type: string
                        resourceVersion:
                          description: |-
                            Specific resourceVersion to which this reference is made, if any.
                            More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
                          type: string
                        uid:
                          description: |-
                            UID of the referent.
                            More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
                          type: string
                      type: object
                      x-kubernetes-map-type: atomic
                    uri:
                      description: MUSTï¼šURI
                      type: string
                  type: object
                type: array
              root:
                description: |-
                  Root
                  ref to root ScenarioRun
                properties:
                  apiVersion:
                    description: API version of the referent.
                    type: string
                  fieldPath:
                    description: |-
                      If referring to a piece of an object instead of an entire object, this string
                      should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
                      For example, if the object reference is to a container within a pod, this would take on a value like:
                      "spec.containers{name}" (where "name" refers to the name of the container that triggered
                      the event) or if no container name is specified "spec.containers[2]" (container with
                      index 2 in this pod). This syntax is chosen only to have some well-defined way of
                      referencing a part of an object.
                      TODO: this design is not final and this field is subject to change in the future.
                    type: string
                  kind:
                    description: |-
                      Kind of the referent.
                      More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
                    type: string
                  name:
                    description: |-
                      Name of the referent.
                      More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                    type: string
                  namespace:
                    description: |-
                      Namespace of the referent.
                      More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
                    type: string
                  resourceVersion:
                    description: |-
                      Specific resourceVersion to which this reference is made, if any.
                      More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
                    type: string
                  uid:
                    description: |-
                      UID of the referent.
                      More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
                    type: string
                type: object
                x-kubernetes-map-type: atomic
              source:
                description: Source
                properties:
                  object:
                    description: |-
                      ObjectReference contains enough information to let you inspect or modify the referred object.
                      ---
                      New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs.
                       1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage.
                       2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular
                          restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted".
                          Those cannot be well described when embedded.
                       3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen.
                       4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity
                          during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple
                          and the version of the actual struct is irrelevant.
                       5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type
                          will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control.


                      Instead of using this type, create a locally provided and used type that is well-focused on your reference.
                      For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
                    properties:
                      apiVersion:
                        description: API version of the referent.
                        type: string
                      fieldPath:
                        description: |-
                          If referring to a piece of an object instead of an entire object, this string
                          should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
                          For example, if the object reference is to a container within a pod, this would take on a value like:
                          "spec.containers{name}" (where "name" refers to the name of the container that triggered
                          the event) or if no container name is specified "spec.containers[2]" (container with
                          index 2 in this pod). This syntax is chosen only to have some well-defined way of
                          referencing a part of an object.
                          TODO: this design is not final and this field is subject to change in the future.
                        type: string
                      kind:
                        description: |-
                          Kind of the referent.
                          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
                        type: string
                      name:
                        description: |-
                          Name of the referent.
                          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                        type: string
                      namespace:
                        description: |-
                          Namespace of the referent.
                          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
                        type: string
                      resourceVersion:
                        description: |-
                          Specific resourceVersion to which this reference is made, if any.
                          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
                        type: string
                      uid:
                        description: |-
                          UID of the referent.
                          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
                        type: string
                    type: object
                    x-kubernetes-map-type: atomic
                  uri:
                    description: MUSTï¼šURI
                    type: string
                type: object
              targets:
                description: Targets
                items:
                  properties:
                    object:
                      description: |-
                        ObjectReference contains enough information to let you inspect or modify the referred object.
                        ---
                        New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs.
                         1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage.
                         2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular
                            restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted".
                            Those cannot be well described when embedded.
                         3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen.
                         4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity
                            during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple
                            and the version of the actual struct is irrelevant.
                         5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type
                            will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control.


                        Instead of using this type, create a locally provided and used type that is well-focused on your reference.
                        For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
                      properties:
                        apiVersion:
                          description: API version of the referent.
                          type: string
                        fieldPath:
                          description: |-
                            If referring to a piece of an object instead of an entire object, this string
                            should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
                            For example, if the object reference is to a container within a pod, this would take on a value like:
                            "spec.containers{name}" (where "name" refers to the name of the container that triggered
                            the event) or if no container name is specified "spec.containers[2]" (container with
                            index 2 in this pod). This syntax is chosen only to have some well-defined way of
                            referencing a part of an object.
                            TODO: this design is not final and this field is subject to change in the future.
                          type: string
                        kind:
                          description: |-
                            Kind of the referent.
                            More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
                          type: string
                        name:
                          description: |-
                            Name of the referent.
                            More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                          type: string
                        namespace:
                          description: |-
                            Namespace of the referent.
                            More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
                          type: string
                        resourceVersion:
                          description: |-
                            Specific resourceVersion to which this reference is made, if any.
                            More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
                          type: string
                        uid:
                          description: |-
                            UID of the referent.
                            More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
                          type: string
                      type: object
                      x-kubernetes-map-type: atomic
                    uri:
                      description: MUSTï¼šURI
                      type: string
                  type: object
                type: array
              ttlAfterCompletionSeconds:
                description: TTLAfterCompletionSeconds
                format: int64
                type: integer
            required:
            - breakpoint
            type: object
          status:
            description: ScenarioRunStatus defines the observed state of ScenarioRun
            properties:
              completedAt:
                description: CompletedAt
                format: date-time
                type: string
              conditions:
                description: Conditions the latest available observations of a resource's
                  current state.
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource.\n---\nThis struct is intended for
                    direct use as an array at the field path .status.conditions.  For
                    example,\n\n\n\ttype FooStatus struct{\n\t    // Represents the
                    observations of a foo's current state.\n\t    // Known .status.conditions.type
                    are: \"Available\", \"Progressing\", and \"Degraded\"\n\t    //
                    +patchMergeKey=type\n\t    // +patchStrategy=merge\n\t    // +listType=map\n\t
                    \   // +listMapKey=type\n\t    Conditions []metav1.Condition `json:\"conditions,omitempty\"
                    patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`\n\n\n\t
                    \   // other fields\n\t}"
                  properties:
                    lastTransitionTime:
                      description: |-
                        lastTransitionTime is the last time the condition transitioned from one status to another.
                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: |-
                        message is a human readable message indicating details about the transition.
                        This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: |-
                        observedGeneration represents the .metadata.generation that the condition was set based upon.
                        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                        with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: |-
                        reason contains a programmatic identifier indicating the reason for the condition's last transition.
                        Producers of specific condition types may define expected values and meanings for this field,
                        and whether the values are considered a guaranteed API.
                        The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: |-
                        type of condition in CamelCase or in foo.example.com/CamelCase.
                        ---
                        Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be
                        useful (see .node.status.conditions), the ability to deconflict is important.
                        The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              error:
                description: Error
                properties:
                  code:
                    description: Code is a globally unique identifier
                    type: string
                  message:
                    description: A human-readable message indicating details about
                      the transition.
                    type: string
                  reason:
                    description: A human-readable short word
                    type: string
                type: object
              observedGeneration:
                description: ObservedGeneration represents the .metadata.generation
                  that the status was set based upon
                format: int64
                type: integer
              phase:
                description: Phase
                type: string
              stages:
                description: |-
                  Stages is status of pre/post check
                  .
                  â””â”€â”€ stages
                      â”œâ”€â”€ pre
                      â”‚   â””â”€â”€ steps
                      â”‚       â””â”€â”€ latches
                      â””â”€â”€ post
                          â””â”€â”€ steps
                              â””â”€â”€ latches
                properties:
                  post:
                    properties:
                      finishAt:
                        format: date-time
                        type: string
                      indexFail:
                        format: int64
                        type: integer
                      startAt:
                        format: date-time
                        type: string
                      steps:
                        items:
                          properties:
                            latches:
                              items:
                                properties:
                                  InConclusive:
                                    format: int64
                                    type: integer
                                  allowed:
                                    type: boolean
                                  count:
                                    format: int64
                                    type: integer
                                  failure:
                                    format: int64
                                    type: integer
                                  ignore:
                                    format: int64
                                    type: integer
                                  name:
                                    type: string
                                  result:
                                    properties:
                                      code:
                                        description: Code is a globally unique identifier
                                        type: string
                                      message:
                                        description: A human-readable message indicating
                                          details about the transition.
                                        type: string
                                      reason:
                                        description: A human-readable short word
                                        type: string
                                    type: object
                                  success:
                                    format: int64
                                    type: integer
                                  warnings:
                                    items:
                                      type: string
                                    type: array
                                type: object
                              type: array
                            name:
                              type: string
                          type: object
                        type: array
                    type: object
                  pre:
                    properties:
                      finishAt:
                        format: date-time
                        type: string
                      indexFail:
                        format: int64
                        type: integer
                      startAt:
                        format: date-time
                        type: string
                      steps:
                        items:
                          properties:
                            latches:
                              items:
                                properties:
                                  InConclusive:
                                    format: int64
                                    type: integer
                                  allowed:
                                    type: boolean
                                  count:
                                    format: int64
                                    type: integer
                                  failure:
                                    format: int64
                                    type: integer
                                  ignore:
                                    format: int64
                                    type: integer
                                  name:
                                    type: string
                                  result:
                                    properties:
                                      code:
                                        description: Code is a globally unique identifier
                                        type: string
                                      message:
                                        description: A human-readable message indicating
                                          details about the transition.
                                        type: string
                                      reason:
                                        description: A human-readable short word
                                        type: string
                                    type: object
                                  success:
                                    format: int64
                                    type: integer
                                  warnings:
                                    items:
                                      type: string
                                    type: array
                                type: object
                              type: array
                            name:
                              type: string
                          type: object
                        type: array
                    type: object
                type: object
              startAt:
                description: StartAt
                format: date-time
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
